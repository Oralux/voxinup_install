#!/bin/sh
# 
# voxinup init.d script with LSB support.
#
# This file is based on the original work from:
# Espeakup init.d script with LSB support.
#
# Copyright (c) 2007 Javier Fernandez-Sanguino <jfs@debian.org>
# Copyright (c) 2009 Samuel Thibault <samuel.thibault@ens-lyon.org>
#
# This is free software; you may redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2,
# or (at your option) any later version.
#
# This is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License with
# the Debian operating system, in /usr/share/common-licenses/GPL;  if
# not, write to the Free Software Foundation, Inc., 59 Temple Place,
# Suite 330, Boston, MA 02111-1307 USA
#
### BEGIN INIT INFO
# Provides:          voxinup
# Required-Start:    $remote_fs
# Required-Stop:
# Should-Start:      module-init-tools
# Should-Stop:
# Default-Start:     S
# Default-Stop:
# Short-Description: Speakup/ibmtts connector
# Description:       Daemon that makes speakup use the ibmtts
#                    software speech synthesizer
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

DAEMON=/usr/bin/voxinup
NAME=voxinup
DESC="Speakup/voxin connector"
LOGDIR=/var/log/voxinup

test -x $DAEMON || exit 0
test -r /dev/softsynth || exit 0

. /lib/lsb/init-functions

# Default options, these can be overriden by the information
# at /etc/default/$NAME
DAEMON_OPTS=""          # Additional options given to the server

DIETIME=10              # Time to wait for the server to die, in seconds
                        # If this value is set too low you might not
                        # let some servers to die gracefully and
                        # 'restart' will not work

#STARTTIME=2             # Time to wait for the server to start, in seconds
                        # If this value is set each time the server is
                        # started (on start or restart) the script will
                        # stall to try to determine if it is running
                        # If it is not set and the server takes time
                        # to setup a pid file the log message might
                        # be a false positive (says it did not start
                        # when it actually did)

LOGFILE=$LOGDIR/$NAME.log  # Server logfile

# Include defaults if available
if [ -f /etc/default/$NAME ] ; then
    . /etc/default/$NAME
fi

set -e

running() {
    pid=$( pidof /usr/bin/voxinup )
    return $?
}


start_server() {
    start_daemon $DAEMON $DAEMON_OPTS
}

stop_server() {
    pid=$( pidof /usr/bin/voxinup )
    if [ "$?" != "0" ]; then
	return 0
    fi
    kill -TERM $pid
}

reload_server() {
    pid=$( pidof /usr/bin/voxinup )
    if [ "$?" != "0" ]; then
	return 0
    fi
    kill -HUP $pid
    return $?
}

force_stop() {
    pid=$( pidof /usr/bin/voxinup )
    if [ "$?" != "0" ]; then
	return 0
    fi
    kill -KILL $pid
}


case "$1" in
  start)
        log_daemon_msg "Starting $DESC " "$NAME"
        if start_server ; then
            log_end_msg 0
        else
            log_end_msg 1
        fi
        ;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        errcode=0
        stop_server || errcode=$?
        log_end_msg $errcode
        ;;
  force-stop)
        # First try to stop gracefully the program
        $0 stop
        log_daemon_msg "Stopping (force) $DESC" "$NAME"
        errcode=0
        force_stop || errcode=$?
        log_end_msg $errcode
        ;;
  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        errcode=0
        stop_server || errcode=$?
        # Wait some sensible amount, some server need this
        [ -n "$DIETIME" ] && sleep $DIETIME
        start_server || errcode=$?
        [ -n "$STARTTIME" ] && sleep $STARTTIME
        log_end_msg $errcode
        ;;
  status)
        log_daemon_msg "Checking status of $DESC" "$NAME"
        if running ;  then
            log_progress_msg "running"
            log_end_msg 0
        else
            log_progress_msg "apparently not running"
            log_end_msg 1
            exit 1
        fi
        ;;
  reload)
        log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
        log_warning_msg "cannot re-read the config file (use restart)."
        ;;
  *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|force-stop|restart|force-reload|status}" >&2
        exit 1
        ;;
esac

exit 0
